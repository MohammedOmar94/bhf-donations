{"version":3,"sources":["components/Donations/Donations.module.css","containers/DonationsViewer/DonationsViewer.module.css","components/Donations/Donations.js","containers/DonationsViewer/DonationsViewer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Donation","DonorName","CharityInformation","Loader","donations","props","donationsList","map","donation","index","donationDate","Date","parseInt","substr","toLocaleDateString","react_default","a","createElement","key","donorDisplayName","className","classes","src","imageUrl","alt","donorLocalAmount","toFixed","donorLocalCurrencyCode","message","Donations","DonationsViewer","state","charityInfo","loadingDonations","getCharityInfo","axios","get","headers","Content-Type","data","then","response","_this","setState","catch","error","console","log","getDonations","this","themeColour","_ref","Object","values","donationsComponent","BeatLoader_default","sizeUnit","size","color","loading","react","logoAbsoluteUrl","style","concat","name","description","Component","App","containers_DonationsViewer_DonationsViewer","Boolean","window","location","hostname","match","defaults","baseURL","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.002294ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Donation\":\"Donations_Donation__3R7sR\",\"DonorName\":\"Donations_DonorName__20bNC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CharityInformation\":\"DonationsViewer_CharityInformation__3b24g\",\"Loader\":\"DonationsViewer_Loader__2hsdC\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport classes from './Donations.module.css';\r\n\r\nconst donations = props => {\r\n  const donationsList = props.donations.map((donation, index) => {\r\n    const donationDate = new Date(parseInt(donation.donationDate.substr(6))).toLocaleDateString(\"en-GB\");\r\n    return (\r\n      <section key={donation.donorDisplayName + index} className={classes.Donation}>\r\n        <img src={donation.imageUrl} alt=\"BHF User\" />\r\n        <section>\r\n          <p>{donationDate}</p>\r\n          <p className={classes.DonorName}>\r\n            <b>{donation.donorDisplayName}</b> donated{\" \"}\r\n            <b>\r\n              {donation.donorLocalAmount.toFixed(2)}{\" \"}\r\n              {donation.donorLocalCurrencyCode}\r\n            </b>\r\n          </p>\r\n          <p>{donation.message}</p>\r\n        </section>\r\n      </section>\r\n    );\r\n  });\r\n  return <article className={classes.Donations}>{donationsList}</article>;\r\n};\r\n\r\ndonations.propTypes = {\r\n  donations: PropTypes.array\r\n};\r\n\r\nexport default donations;\r\n","import React, { Component, Fragment } from \"react\";\r\n\r\nimport axios from \"axios\";\r\nimport classes from './DonationsViewer.module.css';\r\nimport Donations from '../../components/Donations/Donations';\r\nimport BeatLoader from 'react-spinners/BeatLoader';\r\n\r\nclass DonationsViewer extends Component {\r\n  state = {\r\n    charityInfo: {},\r\n    donations: [],\r\n    loadingDonations: true\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getCharityInfo();\r\n    this.getDonations();\r\n  }\r\n\r\n  getCharityInfo = () => {\r\n    axios\r\n      .get(\"/charity/183092\", {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        data: {}\r\n      })\r\n      .then(response => this.setState({ charityInfo: response.data }))\r\n      .catch(error => console.log(error));\r\n  }\r\n\r\n  getDonations = () => {\r\n    axios\r\n    .get(\"/charity/183092/donations\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      data: {}\r\n    })\r\n    .then(response => this.setState({ donations: response.data.donations, loadingDonations: false }))\r\n    .catch(error => console.log(error));\r\n  }\r\n\r\n  render() {\r\n    const charityInfo = this.state.charityInfo;\r\n    const donations = this.state.donations;\r\n    let themeColour = [];\r\n    if (charityInfo.themeColour) {\r\n      themeColour = Object.values(charityInfo.themeColour);\r\n      // Reorder the array so it's in the rgba format.\r\n      [themeColour[0], themeColour[1], themeColour[2], themeColour[3]] = [themeColour[1], themeColour[2], themeColour[3], themeColour[0]];\r\n    }\r\n\r\n    let donationsComponent = null;\r\n    if (this.state.loadingDonations) {\r\n      donationsComponent = (\r\n        <section className={classes.Loader}>\r\n          <BeatLoader\r\n            sizeUnit={\"px\"}\r\n            size={20}\r\n            color={'#ff0030'}\r\n            loading={this.state.loading}\r\n          />\r\n        </section>\r\n      );\r\n    } else {\r\n      donationsComponent = (\r\n        <Fragment>\r\n          <h2>Donations</h2>\r\n          <Donations donations={donations} />\r\n        </Fragment>\r\n      );\r\n    }\r\n    return (\r\n      <Fragment>\r\n        <header className={classes.CharityInformation}>\r\n          <img src={charityInfo.logoAbsoluteUrl} alt='BHF Logo'/>\r\n          <h2 style={{ color: `rgba(${themeColour}` }}>{charityInfo.name}</h2>\r\n          <p  style={{ color: `rgba(${themeColour}` }}>{charityInfo.description}</p>\r\n        </header>\r\n        { donationsComponent }\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DonationsViewer;\r\n","import React from 'react';\n\nimport DonationsViewer from './containers/DonationsViewer/DonationsViewer';\n\nfunction App() {\n  return (\n    <DonationsViewer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport axios from 'axios';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\naxios.defaults.baseURL = 'https://api.justgiving.com/5f0fd882/v1';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}